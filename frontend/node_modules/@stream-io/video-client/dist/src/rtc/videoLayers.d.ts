import { PreferredCodec, PublishOptions } from '../types';
import { TargetResolutionResponse } from '../gen/shims';
import { VideoQuality } from '../gen/video/sfu/models/models';
export type OptimalVideoLayer = RTCRtpEncodingParameters & {
    width: number;
    height: number;
    scalabilityMode?: string;
};
/**
 * In SVC, we need to send only one video encoding (layer).
 * this layer will have the additional spatial and temporal layers
 * defined via the scalabilityMode property.
 *
 * @param layers the layers to process.
 */
export declare const toSvcEncodings: (layers: OptimalVideoLayer[] | undefined) => {
    rid: string;
    active?: boolean;
    maxBitrate?: number;
    maxFramerate?: number;
    networkPriority?: RTCPriorityType;
    priority?: RTCPriorityType;
    scaleResolutionDownBy?: number;
    width: number;
    height: number;
    scalabilityMode?: string;
}[] | undefined;
/**
 * Converts the rid to a video quality.
 */
export declare const ridToVideoQuality: (rid: string) => VideoQuality;
/**
 * Determines the most optimal video layers for simulcasting
 * for the given track.
 *
 * @param videoTrack the video track to find optimal layers for.
 * @param targetResolution the expected target resolution.
 * @param codecInUse the codec in use.
 * @param publishOptions the publish options for the track.
 */
export declare const findOptimalVideoLayers: (videoTrack: MediaStreamTrack, targetResolution?: TargetResolutionResponse, codecInUse?: PreferredCodec, publishOptions?: PublishOptions) => OptimalVideoLayer[];
/**
 * Computes the maximum bitrate for a given resolution.
 * If the current resolution is lower than the target resolution,
 * we want to proportionally reduce the target bitrate.
 * If the current resolution is higher than the target resolution,
 * we want to use the target bitrate.
 *
 * @param targetResolution the target resolution.
 * @param currentWidth the current width of the track.
 * @param currentHeight the current height of the track.
 * @param codecInUse the codec in use.
 * @param publishOptions the publish options.
 */
export declare const getComputedMaxBitrate: (targetResolution: TargetResolutionResponse, currentWidth: number, currentHeight: number, codecInUse?: PreferredCodec, publishOptions?: PublishOptions) => number;
export declare const findOptimalScreenSharingLayers: (videoTrack: MediaStreamTrack, publishOptions?: PublishOptions, defaultMaxBitrate?: number) => OptimalVideoLayer[];
