import { Observable } from 'rxjs';
import { Call } from '../Call';
import { CameraDirection, CameraManagerState } from './CameraManagerState';
import { InputMediaDeviceManager } from './InputMediaDeviceManager';
import { PreferredCodec } from '../types';
export declare class CameraManager extends InputMediaDeviceManager<CameraManagerState> {
    private targetResolution;
    /**
     * Constructs a new CameraManager.
     *
     * @param call the call instance.
     */
    constructor(call: Call);
    private isDirectionSupportedByDevice;
    /**
     * Select the camera direction.
     *
     * @param direction the direction of the camera to select.
     */
    selectDirection(direction: Exclude<CameraDirection, undefined>): Promise<void>;
    /**
     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.
     *
     * Note: if there is no available camera with the desired direction, this method will do nothing.
     * @returns
     */
    flip(): Promise<void>;
    /**
     * @internal
     */
    selectTargetResolution(resolution: {
        width: number;
        height: number;
    }): Promise<void>;
    /**
     * Sets the preferred codec for encoding the video.
     *
     * @internal internal use only, not part of the public API.
     * @deprecated use {@link call.updatePublishOptions} instead.
     * @param codec the codec to use for encoding the video.
     */
    setPreferredCodec(codec: PreferredCodec | undefined): void;
    protected getDevices(): Observable<MediaDeviceInfo[]>;
    protected getStream(constraints: MediaTrackConstraints): Promise<MediaStream>;
    protected publishStream(stream: MediaStream): Promise<void>;
    protected stopPublishStream(stopTracks: boolean): Promise<void>;
}
