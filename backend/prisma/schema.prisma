// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLES {
  ADMIN
  PATIENT
  DOCTOR
}

model Users {
  email         String  @id @unique
  firstName     String
  lastName      String?
  password      String
  isPasswordSet Boolean @default(false)
  roles         ROLES[] @default([PATIENT])
  isVerified    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verification_tokens   VerificationTokens[]  @relation("verificationToken")
  password_reset_tokens PasswordResetTokens[] @relation("resetPasswordToken")
  hosted_appointments   Appointment[]         @relation("appointment_hosted_by")
  attended_appointments Appointment[]         @relation("appointment_attended_by")
}

model VerificationTokens {
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      Users    @relation("verificationToken", fields: [email], references: [email])
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user Users @relation("resetPasswordToken", fields: [email], references: [email])
}

model Appointment {
  id               String  @id @default(uuid())
  hosted_by        String?
  attended_by      String?
  hosted_by_user   Users?  @relation("appointment_hosted_by", fields: [hosted_by], references: [email])
  attended_by_user Users?  @relation("appointment_attended_by", fields: [attended_by], references: [email])
}
